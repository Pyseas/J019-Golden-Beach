{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>golden_beach is a Python library for the Golden Beach project (J019) to write and update SACS files based on data contained in spreadsheets.</p>"},{"location":"#installation","title":"Installation","text":"<p>Use pip to install golden_beach wheel <pre><code>pip install golden_beach-0.1.0-py3-none-any.whl\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":"<pre><code>import golden_beach as gb\n\n# Creates a new sacinp file using data from LiftModel spreadsheet\ngb.make_new_model('LiftModel.xlsx', 'sacinp.base', 'sacinp.lift')\n\n# Write a new file with piping loads in SACS format\ngb.write_piping_loads('PipingLoads.xlsx', 'loadcn.txt')\n\n# Write a new file with soil spring data in SACS format\nrng = gb.SoilRanges(tz='B10:G30', qz='I10:Q30', py='S10:AH62')\n\ngb.write_soil_springs('Springs.xlsx', 'psi_low.dat', rng, 'LOW ESTIMATE', B=2.54)\n</code></pre>"},{"location":"make_new_model/","title":"make_new_model","text":"<p>Modify a SACS base model according to the contents of a spreadsheet.</p> <p>Possible modifications are:</p> <ul> <li>Update title and analysis type description</li> <li>Add new / modify existing joints</li> <li>Add new / modify existing members</li> <li>Remove existing / add new basic load cases</li> <li>Create load combinations</li> <li>Flood selected GRUPS (also inserts HYDRO and HYDRO2 lines)</li> <li>Insert LCSEL</li> <li>Insert notes (as comments)</li> </ul> <p>The following sections describe the use of each of the sheets in the spreadsheet.</p>"},{"location":"make_new_model/#title","title":"TITLE","text":"<p>Input title and analysis type description in cells B1 and B2.</p> <p>The script looks for a line in the base file containing just the word TITLE and inserts the title.</p> <p>The script looks for a line in the base file containing ANALYSIS TYPE and replaces with:</p> <pre><code>****   ANALYSIS TYPE  : analysis_type\n</code></pre>"},{"location":"make_new_model/#joints","title":"joints","text":"<p>Adds new joints or modifies existing joints. Blank cells in the spreadsheet are ignored.</p> <p>If a joint doesn't exist in the base file then a new member is created.</p> <p>For PILEHD fixity enter PILEHD in the FX column.</p>"},{"location":"make_new_model/#members","title":"members","text":"<p>Adds new members or modifies existing members. Blank cells in the spreadsheet are ignored.</p> <p>If a member doesn't exist in the base file then a new member is created.</p>"},{"location":"make_new_model/#loadcn","title":"LOADCN","text":"<p>This sheet contains a list of basic load cases and a list of text file names.</p>"},{"location":"make_new_model/#basic-load-cases","title":"Basic load cases","text":"<p>Each load case is either kept or removed based on the contents of column C.</p> <p>A list of load cases (including descriptions) is inserted as a comment block immediately after the line containing BASIC LOAD CASES in the following format (e.g.):</p> <pre><code>****   BASIC LOAD CASES                                           *\n****   LOAD CASE:  0010 = MODELLED DEAD LOADS                     *\n</code></pre>"},{"location":"make_new_model/#text-files","title":"Text files","text":"<p>For each text file the script looks for the file in a subfolder named load_files. The contents of all files are combined and inserted into the base file at the location of the following line:</p> <pre><code>***ADD LOADS\n</code></pre> <p>Note that the load cases in the text files are not added to the BASIC LOAD CASES comment section.</p>"},{"location":"make_new_model/#lcomb","title":"LCOMB","text":"<p>The script inserts a new LCOMB line for each column in this sheet, starting at column D.</p> <p>Load combinations are inserted immediately before the first END in the base file.</p>"},{"location":"make_new_model/#todo","title":"TODO","text":"<ul> <li>Compare load cases in spreadsheet with load cases in base file, alert any differences.</li> <li>Get list of load cases from text files and add to BASIC LOAD CASES comment section.</li> </ul>"},{"location":"make_new_model/#notes","title":"Notes","text":"<p>This sheet contains a list of notes, starting at cell A2. Notes are inserted in the base file at the location of the following line:</p> <pre><code>***ADD NOTES\n</code></pre>"},{"location":"make_new_model/#lcsel","title":"LCSEL","text":"<p>Adds LCSEL line(s) to the base file, based on contents of column B.</p> <p>LCSEL does not exist in the base file. It's inserted immediately after CODE line(s).</p>"},{"location":"make_new_model/#flood","title":"FLOOD","text":"<p>Flood does 2 things:</p> <ul> <li>Updates LDOPT line with water depth and HYD option</li> <li>Inserts the following lines just before UCPART.</li> </ul> <pre><code>HYDRO +ZISEXTFLNO  I20.000              2.000     1.025     1.000     0.250\nHYDRO2    0.900IN0.8002.000\n</code></pre>"},{"location":"piping_loads/","title":"piping_loads","text":"<p>Read load data from a spreadsheet and write to a file in SACS format.</p>"},{"location":"piping_loads/#load-case-id","title":"Load Case ID","text":"<p>Input list of load cases:</p> <ul> <li>Sheet: Worksheet name</li> <li>Column: Index of first column of data (e.g. for column D enter 4)</li> <li>LOADCN: Load case ID</li> <li>LOADLB: Load case description</li> <li>LOAD_ID: Remark at the end of the LOAD line</li> <li>SUFFIX: If LOAD_ID is PSXX then the suffix is added to the remark, e.g. LOAD_ID=PS03, SUFFIX=90, remark=PS03_90. If total width is greater than 8 characters it will be trucated to 8.</li> </ul>"},{"location":"piping_loads/#data-sheets","title":"Data sheets","text":"<p>Joint labels are assumed to be in the first column, rows 3 to 21. Data starts in column specified on Load Case ID sheet, rows 3 to 21, 6 columns wide.</p> <p></p>"},{"location":"ref/","title":"Reference","text":""},{"location":"ref/#golden_beach.make_new_model","title":"<code>golden_beach.make_new_model(xlname, basename, newname)</code>","text":"<p>Create new SACS model from a base model and a spreadsheet.</p> <p>Add new or modify existing joints/members, add/remove basic load conditions, add load combinations.</p> <p>Parameters:</p> <ul> <li> <code>xlname</code>               (<code>str</code>)           \u2013            <p>Spreadsheet filename.</p> </li> <li> <code>basename</code>               (<code>str</code>)           \u2013            <p>SACS base model filename.</p> </li> <li> <code>newname</code>               (<code>str</code>)           \u2013            <p>SACS output filename.</p> </li> </ul>"},{"location":"ref/#golden_beach.write_piping_loads","title":"<code>golden_beach.write_piping_loads(xlname, outname)</code>","text":"<p>Write load data from a spreadsheet to a SACS format file.</p> <p>Parameters:</p> <ul> <li> <code>xlname</code>               (<code>str</code>)           \u2013            <p>Spreadsheet filename.</p> </li> <li> <code>outname</code>               (<code>str</code>)           \u2013            <p>Output filename.</p> </li> </ul>"},{"location":"ref/#golden_beach.write_soil_springs","title":"<code>golden_beach.write_soil_springs(xlname, outname, ranges, tz_title, B)</code>","text":"<p>Write soil springs data from spreadsheet to SACS format file.</p> <p>Parameters:</p> <ul> <li> <code>xlname</code>               (<code>str</code>)           \u2013            <p>Spreadsheet filename.</p> </li> <li> <code>outname</code>               (<code>str</code>)           \u2013            <p>Output filename.</p> </li> <li> <code>ranges</code>               (<code>SoilRanges</code>)           \u2013            <p>SoilRanges object.</p> </li> <li> <code>tz_title</code>               (<code>str</code>)           \u2013            <p>Title to be added as comment at start of T-Z section.</p> </li> <li> <code>B</code>               (<code>float</code>)           \u2013            <p>For plugged pile = OD, unplugged=WT, in cm</p> </li> </ul>"},{"location":"ref/#golden_beach.SoilRanges","title":"<code>golden_beach.SoilRanges</code>  <code>dataclass</code>","text":"<p>Excel ranges for T-Z, Q-Z and P-Y data.</p> <p>Attributes:</p> <ul> <li> <code>tz</code>               (<code>str</code>)           \u2013            <p>Excel range (e.g. 'B10:H30') for T-Z data.</p> </li> <li> <code>qz</code>               (<code>str</code>)           \u2013            <p>Excel range for Q-Z data.</p> </li> <li> <code>py</code>               (<code>str</code>)           \u2013            <p>Excel range for P-Y data.</p> </li> </ul>"},{"location":"soil_springs/","title":"soil_springs","text":"<p>Read T-Z, Q-Z and P-Y data from a spreadsheet and write to a file in SACS format.</p>"},{"location":"soil_springs/#data","title":"Data","text":"<p>Assumed data format is shown below.</p> <p>The depth is rounded to the nearest 0.1m. If 2 rows are identical then the duplicates are dropped.</p> <p>z/B value is multiplied by the input argument B (OD for plugged, WT for unplugged)</p> <p>Spreadsheet units are assumed to be:</p> <ul> <li>T-Z - kPa and mm</li> <li>Q-Z - kPa and unitless</li> <li>P-Y - kN/m and mm</li> </ul> <p></p>"}]}